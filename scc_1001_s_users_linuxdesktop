#!/bin/sh

# Shell script to collect desktop user data as an optional user-module.
# Copyright (C) 2001-2004 Open Challenge B.V.
# Copyright (C) 2004-2005 OpenEyeT Professional Services.
# Copyright (C) 2005-2018 QNH.
# Copyright (C) 2019 Siem Korteweg.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2, or (at your option)
# any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; see the file COPYING.
# If not, write to the Free Software Foundation,
# 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA
#
# Created by Bill Dietrich
# Version: 4

set -u
[ "${SCC_DEBUG:-}" ] && set -x

export ProgName=${0##*/}

if [ -z "${SCC_BIN:-}" -o -z "${SCC_CONF:-}" -o -z "${SCC_DATA:-}" ]
then
	echo "${ProgName}: activate this program via scc(1), scc-log(1) or scc-collect(1)" >&2
	exit 2
fi

if [ ! -w ${SCC_DATA} ]
then
	echo "${ProgName}: insufficient permissions to write in data directory: ${SCC_DATA}" >&2
	exit 2
fi

. ${SCC_BIN}/scc_modules/scc_utils



home="/home"

scc_check_desktop_user()
{
	user="${1}"
		
	for file in .bashrc .bash_logout .bash_profile .cshrc .tcshrc .gitconfig .netrc .profile .pam_environment .selected_editor .xinputrc .zlogin .zshrc
	do
		scc_check_file "${home}/${user}/${file}"  "fix:users:linuxdesktop:${user}:${file}::" "#" 
	done
	
	for binfile in .local/share/keyrings/user.keystore
	do
		echo "fix:users:linuxdesktop:${user}:${binfile}:: "  `cksum ${home}/${user}/${binfile}`
	done

    # Firefox
    ffhome="${home}/${user}/.mozilla/firefox"
    if [ -d "${ffhome}" ]
    then
		scc_check_file "${ffhome}/installs.ini"  "fix:users:linuxdesktop:${user}:Firefox:installs.ini::" "#" 
		scc_check_file "${ffhome}/profiles.ini"  "fix:users:linuxdesktop:${user}:Firefox:profiles.ini::" "#" 

	    for pd in ${ffhome}/*
	    do
	        if [ -d "${pd}" ]
	        then
    	        if [ "${pd}" != "${ffhome}/Crash Reports" -a "${pd}" != "${ffhome}/Pending Pings" ]
	            # it's a profile
		        then
			        scc_check_file "${pd}/prefs.js" "fix:users:linuxdesktop:${user}:Firefox:${pd}:prefs.js::" "#"
			        
			        # JSON files that have no newlines in them; expand them before diffing them
	                for file in addons.json containers.json extensions.json handlers.json
	                do
		                if [ -f "${pd}/${file}" ]
		                then
		                	f="/tmp/sccjson.txt"
		                    sed 's/$/\n/' <"${pd}/${file}" | sed 's/\([{},]\)/\n\1\n/g' >${f}
    		                scc_check_file "${f}"  "fix:users:linuxdesktop:${user}:Firefox:${pd}:${file}::" "#" 
                    		rm ${f}
                        fi
   	                done
		        fi
	        fi
	    done
    fi

    # Tor Browser
	for tordir in `find ${home}/${user} -type d -maxdepth 2 -name 'tor-browser_*' -print`
	do
	    f="${tordir}/Browser/TorBrowser/Data/Browser/profiles.ini"
        if [ -f "${f}" ]
        then
		    scc_check_file "${f}"  "fix:users:linuxdesktop:${user}:TorBrowser:${f}::" "#"

            torhome="${tordir}/Browser/TorBrowser/Data/Browser"
	        for pd in ${torhome}/*
	        do
	            if [ -d "${pd}" ]
	            then
        	        if [ "${pd}" != "${torhome}/Caches" -a "${pd}" != "${torhome}/profile.meek-http-helper" -a "${pd}" != "${torhome}/profile.moat-http-helper" ]
	                # it's a profile
		            then
			            scc_check_file "${pd}/prefs.js" "fix:users:linuxdesktop:${user}:TorBrowser:${pd}:prefs.js::" "#"
			            
			            # JSON files that have no newlines in them; expand them before diffing them
	                    for file in addons.json containers.json extensions.json handlers.json xulstore.json
	                    do
		                    if [ -f "${pd}/${file}" ]
		                    then
		                    	f="/tmp/sccjson.txt"
		                        sed 's/$/\n/' <"${pd}/${file}" | sed 's/\([{},]\)/\n\1\n/g' >${f}
        		                scc_check_file "${f}"  "fix:users:linuxdesktop:${user}:TorBrowser:${pd}:${file}::" "#" 
                        		rm ${f}
                            fi
       	                done

		            fi
	            fi
	        done
		fi
	done

    # Thunderbird
    tbhome="${home}/${user}/.thunderbird"
    if [ -d "${tbhome}" ]
    then
		scc_check_file "${tbhome}/installs.ini"  "fix:users:linuxdesktop:${user}:Thunderbird:installs.ini::" "#" 
		scc_check_file "${tbhome}/profiles.ini"  "fix:users:linuxdesktop:${user}:Thunderbird:profiles.ini::" "#" 

	    for pd in ${tbhome}/*
	    do
	        if [ -d "${pd}" ]
	        then
    	        if [ "${pd}" != "${tbhome}/Crash Reports" -a "${pd}" != "${tbhome}/Pending Pings" ]
	            # it's a profile
		        then
			        scc_check_file "${pd}/prefs.js" "fix:users:linuxdesktop:${user}:Thunderbird:${pd}:prefs.js::" "#"
			        scc_check_file "${pd}/pkcs11.txt" "fix:users:linuxdesktop:${user}:Thunderbird:${pd}:pkcs11.txt::" "#"
			        
			        # JSON files that have no newlines in them; expand them before diffing them
	                for file in addons.json directoryTree.json extension-preferences.json extensions.json folderTree.json handlers.json logins.json
	                do
		                if [ -f "${pd}/${file}" ]
		                then
		                	f="/tmp/sccjson.txt"
		                    sed 's/$/\n/' <"${pd}/${file}" | sed 's/\([{},]\)/\n\1\n/g' >${f}
    		                scc_check_file "${f}"  "fix:users:linuxdesktop:${user}:Thunderbird:${pd}:${file}::" "#" 
                    		rm ${f}
                        fi
   	                done
       	                
                    ftmp="/tmp/sccfiles.txt"
                    ls -l --time-style=long-iso ${pd}/cert9.db ${pd}/key4.db >${ftmp}
                    scc_check_file "${ftmp}" "fix:users:linuxdesktop:${user}:Thunderbird:${pd}:dbfiles::" "#"
                    rm ${ftmp}
		        fi
	        fi
	    done
    fi

    # Chromium
    chome="${home}/${user}/.config/chromium"
    if [ -d "${chome}" ]
    then

	    for pd in ${chome}/*
	    do
	        if [ -d "${pd}" ]
	        then
    	        if [ "${pd}" != "${chome}/Crash Reports" -a "${pd}" != "${chome}/Dictionaries" -a "${pd}" != "${chome}/NativeMessagingHosts" -a "${pd}" != "${chome}/ShaderCache" ]
	            # it's a profile
		        then
			        scc_check_file "${pd}/Bookmarks" "fix:users:linuxdesktop:${user}:Chromium:${pd}:Bookmarks::" "#"
			        
			        # JSON files that have no newlines in them; expand them before diffing them
	                for file in Preferences 'Secure Preferences'
	                do
		                if [ -f "${pd}/${file}" ]
		                then
		                	f="/tmp/sccjson.txt"
		                    sed 's/$/\n/' <"${pd}/${file}" | sed 's/\([{},]\)/\n\1\n/g' >${f}
    		                scc_check_file "${f}"  "fix:users:linuxdesktop:${user}:Chromium:${pd}:${file}::" "#" 
                    		rm ${f}
                        fi
   	                done
       	                
                    ftmp="/tmp/sccfiles.txt"
                    ls -l --time-style=long-iso ${pd}/'Origin Bound Certs' >${ftmp}
                    scc_check_file "${ftmp}" "fix:users:linuxdesktop:${user}:Chromium:${pd}:OriginBoundCerts::" "#"
                    rm ${ftmp}
		        fi
	        fi
	    done
    fi

    # Chrome
    chome="${home}/${user}/.config/google-chrome"
    if [ -d "${chome}" ]
    then

	    for pd in ${chome}/*
	    do
	        if [ -d "${pd}" ]
	        then
    	        if [ "${pd}" != "${chome}/Crash Reports" -a "${pd}" != "${chome}/Dictionaries" -a "${pd}" != "${chome}/NativeMessagingHosts" -a "${pd}" != "${chome}/ShaderCache" ]
	            # it's a profile
		        then
			        scc_check_file "${pd}/Bookmarks" "fix:users:linuxdesktop:${user}:Chrome:${pd}:Bookmarks::" "#"
			        
			        # JSON files that have no newlines in them; expand them before diffing them
	                for file in Preferences 'Secure Preferences'
	                do
		                if [ -f "${pd}/${file}" ]
		                then
		                	f="/tmp/sccjson.txt"
		                    sed 's/$/\n/' <"${pd}/${file}" | sed 's/\([{},]\)/\n\1\n/g' >${f}
    		                scc_check_file "${f}"  "fix:users:linuxdesktop:${user}:Chrome:${pd}:${file}::" "#" 
                    		rm ${f}
                        fi
   	                done
       	                
                    ftmp="/tmp/sccfiles.txt"
                    ls -l --time-style=long-iso ${pd}/'Origin Bound Certs' >${ftmp}
                    scc_check_file "${ftmp}" "fix:users:linuxdesktop:${user}:Chrome:${pd}:OriginBoundCerts::" "#"
                    rm ${ftmp}
		        fi
	        fi
	    done
    fi

    # Wine
    whome="${home}/${user}/.wine"
    if [ -d "${whome}" ]
    then
		scc_check_file "${whome}/userdef.reg"  "fix:users:linuxdesktop:${user}:Wine:userdef.reg::" "#" 
    fi

    # Desktop file associations ?
    dhome="${home}/${user}/.local/share/applications"
    if [ -d "${dhome}" ]
    then
		for file in ${dhome}/*
		do
			if [ -f "${file}" ]
			then
				scc_check_file "${file}"  "fix:users:linuxdesktop:${user}:${dhome}:${file}::" "#" 
			fi
		done
    fi

    # Nemo file-explorer scripts ?
    dhome="${home}/${user}/.local/share/nemo/scripts"
    if [ -d "${dhome}" ]
    then
		for file in ${dhome}/*
		do
			if [ -f "${file}" ]
			then
				scc_check_file "${file}"  "fix:users:linuxdesktop:${user}:${dhome}:${file}::" "#" 
			fi
		done
    fi

}


for u in `ls ${home}`
do
	if [ "${u}" != "lost+found" -a "${u}" != "timeshift" ]
	then
		scc_check_desktop_user "${u}"
	fi
done


exit 0
