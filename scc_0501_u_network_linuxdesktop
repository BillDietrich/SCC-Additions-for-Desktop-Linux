#!/bin/sh

# Shell script to collect desktop network/LAN data as an optional user-module.
# Copyright (C) 2001-2004 Open Challenge B.V.
# Copyright (C) 2004-2005 OpenEyeT Professional Services.
# Copyright (C) 2005-2018 QNH.
# Copyright (C) 2019 Siem Korteweg.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2, or (at your option)
# any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; see the file COPYING.
# If not, write to the Free Software Foundation,
# 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA
#
# Created by Bill Dietrich
 
set -u
[ "${SCC_DEBUG:-}" ] && set -x

export ProgName=${0##*/}

if [ -z "${SCC_BIN:-}" -o -z "${SCC_CONF:-}" -o -z "${SCC_DATA:-}" ]
then
	echo "${ProgName}: activate this program via scc(1), scc-log(1) or scc-collect(1)" >&2
	exit 2
fi

if [ ! -w ${SCC_DATA} ]
then
	echo "${ProgName}: insufficient permissions to write in data directory: ${SCC_DATA}" >&2
	exit 2
fi

. ${SCC_BIN}/scc_modules/scc_utils


openvpn_bin="/usr/sbin/openvpn"
if [ -x "${openvpn_bin}" ]
then
    echo 'var:network:desktop::Openvpn default gateway ' `${openvpn_bin} --show-gateway | sed -e 's/^.*ROUTE/ROUTE/'`
    # seems to be no way show status of connection
    # cat /var/run/openvpn.openvpn.status ???
    # run systemctl status openvpn@* ???
fi


windscribe_bin="/usr/bin/windscribe"
if [ -x "${windscribe_bin}" ]
then
    echo 'var:network:desktop::Windscribe VPN ' `${windscribe_bin} status | grep 'IP:'`
    echo 'var:network:desktop::Windscribe VPN ' `${windscribe_bin} status | grep 'CONNECTED'`
    echo 'var:network:desktop::Windscribe VPN ' `${windscribe_bin} firewall | grep 'Firewall mode:'`
fi


ip_bin="/sbin/ip"
if [ -x "${ip_bin}" ]
then
    echo 'var:network:desktop::Router IP address ' `${ip_bin} route | grep default`
    echo 'var:network:desktop::Router MAC address ' `${ip_bin} neigh`
fi

dig_bin="/usr/bin/dig"
if [ -x "${dig_bin}" ]
then
    echo 'var:network:desktop::System public IP address:  ' `${dig_bin} r +short myip.opendns.com @resolver1.opendns.com`
    echo 'var:network:desktop::System public IP address:  ' `${dig_bin} TXT +short o-o.myaddr.l.google.com @ns1.google.com`
fi

host_bin="/usr/bin/host"
if [ -x "${host_bin}" ]
then
    echo 'var:network:desktop::System public IP address:  ' `${host_bin} myip.opendns.com resolver1.opendns.com | grep 'has address'`
fi


exit 0
